generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  logoUrl     String?
  primaryColor String?
  timezone    String   @default("UTC")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users       User[]
  clients     Client[]
  issues      Issue[]
  webhooks    Webhook[]
  apiTokens   ApiToken[]

  @@map("organizations")
}

model User {
  id             String   @id @default(cuid())
  email          String   @unique
  firstName      String
  lastName       String
  role           UserRole
  isActive       Boolean  @default(true)
  organizationId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization     Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  mfaSettings      UserMfa?
  recoveryCodes    UserRecoveryCode[]
  trustedDevices   TrustedDevice[]
  refreshTokens    RefreshToken[]
  createdIssues    Issue[]           @relation("IssueCreator")
  assignedIssues   Issue[]           @relation("IssueAssignee")
  comments         Comment[]
  attachments      Attachment[]

  @@map("users")
}

model UserMfa {
  id        String   @id @default(cuid())
  userId    String   @unique
  secret    String
  isEnabled Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_mfa")
}

model UserRecoveryCode {
  id        String   @id @default(cuid())
  userId    String
  code      String
  isUsed    Boolean  @default(false)
  createdAt DateTime @default(now())
  usedAt    DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_recovery_codes")
}

model TrustedDevice {
  id          String   @id @default(cuid())
  userId      String
  deviceId    String
  deviceName  String
  ipAddress   String
  userAgent   String
  expiresAt   DateTime
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, deviceId])
  @@map("trusted_devices")
}

model RefreshToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model Client {
  id             String   @id @default(cuid())
  name           String
  email          String
  organizationId String
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  issues       Issue[]

  @@unique([email, organizationId])
  @@map("clients")
}

model Issue {
  id             String        @id @default(cuid())
  number         String        @unique
  title          String
  description    String?
  status         IssueStatus   @default(OPEN)
  priority       IssuePriority @default(MEDIUM)
  urgency        IssueUrgency  @default(MEDIUM)
  channel        IssueChannel  @default(WEB)
  assigneeId     String?
  clientId       String?
  organizationId String
  createdById    String
  slaDueAt       DateTime?
  resolvedAt     DateTime?
  searchVector   String?       // For full-text search
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdBy    User         @relation("IssueCreator", fields: [createdById], references: [id])
  assignee     User?        @relation("IssueAssignee", fields: [assigneeId], references: [id])
  client       Client?      @relation(fields: [clientId], references: [id])
  comments     Comment[]
  attachments  Attachment[]

  @@map("issues")
}

model Comment {
  id         String   @id @default(cuid())
  content    String
  issueId    String
  authorId   String
  isInternal Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  issue       Issue        @relation(fields: [issueId], references: [id], onDelete: Cascade)
  author      User         @relation(fields: [authorId], references: [id])
  attachments Attachment[]

  @@map("comments")
}

model Attachment {
  id           String   @id @default(cuid())
  filename     String
  originalName String
  mimeType     String
  size         Int
  url          String
  issueId      String?
  commentId    String?
  uploadedById String
  createdAt    DateTime @default(now())

  issue      Issue?   @relation(fields: [issueId], references: [id], onDelete: Cascade)
  comment    Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  uploadedBy User     @relation(fields: [uploadedById], references: [id])

  @@map("attachments")
}

model Webhook {
  id             String      @id @default(cuid())
  name           String
  url            String
  secret         String
  events         String[]    // JSON array of event types
  isActive       Boolean     @default(true)
  organizationId String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  deliveries   WebhookDelivery[]

  @@map("webhooks")
}

model WebhookDelivery {
  id         String                @id @default(cuid())
  webhookId  String
  eventType  String
  payload    Json
  status     WebhookDeliveryStatus @default(PENDING)
  attempts   Int                   @default(0)
  lastError  String?
  createdAt  DateTime              @default(now())
  updatedAt  DateTime              @updatedAt

  webhook Webhook @relation(fields: [webhookId], references: [id], onDelete: Cascade)

  @@map("webhook_deliveries")
}

model ApiToken {
  id             String   @id @default(cuid())
  name           String
  token          String   @unique
  organizationId String
  isActive       Boolean  @default(true)
  lastUsedAt     DateTime?
  expiresAt      DateTime?
  createdAt      DateTime @default(now())

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("api_tokens")
}

enum UserRole {
  OWNER
  MEMBER
  CLIENT
}

enum IssueStatus {
  OPEN
  IN_PROGRESS
  DONE
}

enum IssuePriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum IssueUrgency {
  LOW
  MEDIUM
  HIGH
}

enum IssueChannel {
  EMAIL
  WEB
  API
  PHONE
}

enum WebhookDeliveryStatus {
  PENDING
  SUCCESS
  FAILED
}
